// SlangExpression.xbnf
// This is the XBNF spec for Slang Expressions (gplex version - unicode enabled)
// Slang is a CodeDOM compliant subset of C#
// Expressions

Expression<start>=AssignExpression;
RelationalExpression = TermExpression { ("<"|"<="|">"|">=") TermExpression };
EqualityExpression = RelationalExpression { ("=="|"!=") RelationalExpression };
BitwiseAndExpression = EqualityExpression { "&" EqualityExpression };
BitwiseOrExpression = BitwiseAndExpression { "|" BitwiseAndExpression };
AndExpression= BitwiseOrExpression { "&&" BitwiseOrExpression };
OrExpression= AndExpression { "||" AndExpression };
AssignExpression= OrExpression { ("="|"+="|"-="|"*="|"/="|"%="|"&="|"|=") OrExpression };
TermExpression= FactorExpression { ("+"|"-") FactorExpression };
FactorExpression= UnaryExpression { ("*"|"/"|"%") UnaryExpression };
ArgList<follows="rbracket">= Expression { "," Expression };
MethodArgList = MethodArg { "," MethodArg } |;
MemberFieldRef = "." Identifier;
MemberInvokeRef = "(" MethodArgList ")";
MemberIndexerRef = "[" ArgList "]";
MemberAnyRef<collapsed> = MemberFieldRef | MemberInvokeRef | MemberIndexerRef ;
MethodArg = [ outKeyword | refKeyword ] Expression;
IntrinsicType=	boolType	|
				charType	|
				stringType	|
				floatType	|
				doubleType	|
				decimalType	|
				sbyteType	|
				byteType	|
				shortType	|
				ushortType	|
				intType		|
				uintType	|
				longType	|
				ulongType	|
				objectType	;
TypeBase = ([ "global" "::" ] Identifier { "."  Identifier }) | IntrinsicType;
Type<shared>=TypeElement { TypeArraySpec };
TypeElement = TypeBase [ TypeGenericPart ];
TypeGenericPart= "<" [ Type { "," Type } ] ">";
TypeArraySpec= "[" { TypeArraySpecRank } "]";
TypeArraySpecRank = comma; 
CastExpression= "(" Type ")" UnaryExpression;
ArraySpec= "[" Expression "]" { "[" { "," } "]" };
NewExpression= newKeyword TypeElement ( NewObjectPart | NewArrayPart );
NewObjectPart<collapsed>= "(" (ArgList|) ")";
NewArrayPart<collapsed>= ArraySpec;

ArrayInitializer= "{" [ Expression { "," Expression } ] "}";
SubExpression<collapsed> = "(" Expression ")";
UnaryExpression= ("+"|"-"|"!"|"++"|"--") UnaryExpression | CastExpression | PrimaryExpression;
PrimaryExpression=	
		verbatimStringLiteral { MemberAnyRef }				|
		characterLiteral { MemberAnyRef }					|
		integerLiteral { MemberAnyRef }						| 
		floatLiteral { MemberAnyRef }						|
		stringLiteral  { MemberAnyRef }						|
		boolLiteral { MemberAnyRef }						|
		nullLiteral											|
		SubExpression { MemberAnyRef }						|
		typeOf "(" Type ")"	{ MemberAnyRef }				|
		defaultOf "(" Type ")" { MemberAnyRef }				|
		NewExpression { MemberAnyRef }						|
		thisRef { MemberAnyRef }							|
		baseRef { MemberAnyRef }							|
		Identifier { MemberAnyRef }							|
		Type MemberFieldRef { MemberAnyRef }				;
		
// Identifier exists as a non-terminal solely to attach a semantic constraint to identifiers.
// we collapse it because we don't need it in the final parse tree but in the grammar 
// we have to refer to "Identifier" instead of identifier or verbatimIdentifer.
Identifier<collapsed> = verbatimIdentifier | identifier;

// be careful about the order of the terminals.
// remember they have priorities in the final lexer

verbatimIdentifier='@(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*';
// begin keywords
outKeyword="out";
refKeyword="ref";
typeOf="typeof";
defaultOf="default";
newKeyword="new";
globalKeyword="global";
stringType="string";
boolType="bool";
charType="char";
floatType="float";
doubleType="double";
decimalType="decimal";
sbyteType="sbyte";
byteType="byte";
shortType="short";
ushortType="ushort";
intType="int";
uintType="uint";
longType="long";
ulongType="ulong";
objectType="object";
boolLiteral = 'true|false';
nullLiteral = "null";
thisRef = "this";
baseRef = "base";
verbatimStringLiteral='@"([^"|""])*"';
// bury this
identifier<priority=-100>='(_|[[:IsLetter:]])(_|[[:IsLetterOrDigit:]])*';
stringLiteral='"([^\\"\'\a\b\f\n\r\t\v\0]|\\[^\r\n]|\\[0-7]{3}|\\x[0-9A-Fa-f]{2}|\\u[0-9A-Fa-f]{4}|\\U[0-9A-Fa-f]{8})*"';
characterLiteral='[\u0027]([^\\"\'\a\b\f\n\r\t\v\0]|\\[^\r\n]|\\[0-7]{3}|\\x[0-9A-Fa-f]{2}|\\u[0-9A-Fa-f]{4}|\\U[0-9A-Fa-f]{8})[\u0027]';
lte="<=";
lt="<";
gte=">=";
gt=">";
eqEq="==";
notEq="!=";
eq="=";
inc="++";
addAssign="+=";
add="+";
dec="--";
subAssign="-=";
sub="-";
mulAssign="*=";
mul="*";
divAssign="/=";
div="/";
modAssign="%=";
mod="%";
and="&&";
bitwiseAndAssign="&=";
bitwiseAnd="&";
or="||";
bitwiseOrAssign="|=";
bitwiseOr="|";
not="!";
lbracket="[";
rbracket="]";
lparen="(";
rparen=")";
lbrace="{";
rbrace="}";
comma=",";
colonColon="::";
dot=".";
integerLiteral<priority=-50>= '(0x[0-9A-Fa-f]{1,16}|([0-9]+))([Uu][Ll]?|[Ll][Uu]?)?';
floatLiteral<priority=-51>= '(([0-9]+)(\.[0-9]+)?([Ee][\+\-]?[0-9]+)?[DdMmFf]?)|((\.[0-9]+)([Ee][\+\-]?[0-9]+)?[DdMmFf]?)';
whitespace<hidden>='[ \t\r\n\v\f]+';
