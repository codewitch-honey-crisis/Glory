//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design.Serialization;
using System.Globalization;
using System.Text;

namespace GloryDemo {
    using System.Collections.Generic;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Glory", "0.1.0.0")]
    internal class JsonParser : GlrTableParser {
        internal static int[][][][] ParseTable = new int[][][][] {
                new int[][][] {
                        new int[][] {
                                new int[] {
                                        1}},
                        new int[][] {
                                new int[] {
                                        2}},
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        3}},
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        20}},
                        null,
                        new int[][] {
                                new int[] {
                                        4}},
                        null,
                        null,
                        null,
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        -1}}},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        0,
                                        0,
                                        1}}},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        1,
                                        0,
                                        4}}},
                new int[][][] {
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        5}},
                        new int[][] {
                                new int[] {
                                        7}},
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        11}},
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        5,
                                        2}},
                        null,
                        null,
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        6}},
                        null,
                        null,
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        2,
                                        1,
                                        17,
                                        2,
                                        18}},
                        null,
                        new int[][] {
                                new int[] {
                                        2,
                                        1,
                                        17,
                                        2,
                                        18}},
                        null,
                        new int[][] {
                                new int[] {
                                        2,
                                        1,
                                        17,
                                        2,
                                        18}},
                        null,
                        new int[][] {
                                new int[] {
                                        2,
                                        1,
                                        17,
                                        2,
                                        18}}},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        8}},
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        4,
                                        2,
                                        3}},
                        null,
                        new int[][] {
                                new int[] {
                                        31}},
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        3,
                                        2,
                                        3,
                                        8}},
                        null,
                        new int[][] {
                                new int[] {
                                        9}},
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        10}},
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        11}},
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        19,
                                        8,
                                        8,
                                        20,
                                        3}},
                        null,
                        new int[][] {
                                new int[] {
                                        19,
                                        8,
                                        8,
                                        20,
                                        3}},
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        12}},
                        null,
                        null,
                        null},
                new int[][][] {
                        null,
                        new int[][] {
                                new int[] {
                                        16}},
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        17}},
                        null,
                        new int[][] {
                                new int[] {
                                        13}},
                        new int[][] {
                                new int[] {
                                        18}},
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        15}},
                        new int[][] {
                                new int[] {
                                        14}},
                        new int[][] {
                                new int[] {
                                        27}},
                        new int[][] {
                                new int[] {
                                        28}},
                        new int[][] {
                                new int[] {
                                        19}},
                        new int[][] {
                                new int[] {
                                        20}},
                        null,
                        new int[][] {
                                new int[] {
                                        4}},
                        null,
                        null,
                        null,
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        6,
                                        3,
                                        11,
                                        19,
                                        6}},
                        null,
                        new int[][] {
                                new int[] {
                                        6,
                                        3,
                                        11,
                                        19,
                                        6}},
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        11,
                                        6,
                                        11}},
                        null,
                        new int[][] {
                                new int[] {
                                        11,
                                        6,
                                        11}},
                        null,
                        new int[][] {
                                new int[] {
                                        11,
                                        6,
                                        11}},
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        12,
                                        6,
                                        10}},
                        null,
                        new int[][] {
                                new int[] {
                                        12,
                                        6,
                                        10}},
                        null,
                        new int[][] {
                                new int[] {
                                        12,
                                        6,
                                        10}},
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        13,
                                        6,
                                        1}},
                        null,
                        new int[][] {
                                new int[] {
                                        13,
                                        6,
                                        1}},
                        null,
                        new int[][] {
                                new int[] {
                                        13,
                                        6,
                                        1}},
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        14,
                                        6,
                                        4}},
                        null,
                        new int[][] {
                                new int[] {
                                        14,
                                        6,
                                        4}},
                        null,
                        new int[][] {
                                new int[] {
                                        14,
                                        6,
                                        4}},
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        15,
                                        6,
                                        7}},
                        null,
                        new int[][] {
                                new int[] {
                                        15,
                                        6,
                                        7}},
                        null,
                        new int[][] {
                                new int[] {
                                        15,
                                        6,
                                        7}},
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        16,
                                        6,
                                        14}},
                        null,
                        new int[][] {
                                new int[] {
                                        16,
                                        6,
                                        14}},
                        null,
                        new int[][] {
                                new int[] {
                                        16,
                                        6,
                                        14}},
                        null,
                        null},
                new int[][][] {
                        null,
                        new int[][] {
                                new int[] {
                                        16}},
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        17}},
                        new int[][] {
                                new int[] {
                                        21}},
                        new int[][] {
                                new int[] {
                                        23}},
                        new int[][] {
                                new int[] {
                                        18}},
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        15}},
                        new int[][] {
                                new int[] {
                                        14}},
                        new int[][] {
                                new int[] {
                                        27}},
                        new int[][] {
                                new int[] {
                                        28}},
                        new int[][] {
                                new int[] {
                                        19}},
                        new int[][] {
                                new int[] {
                                        20}},
                        new int[][] {
                                new int[] {
                                        10,
                                        5}},
                        new int[][] {
                                new int[] {
                                        4}},
                        null,
                        null,
                        null,
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        22}},
                        null,
                        null,
                        null,
                        null,
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        7,
                                        4,
                                        15,
                                        5,
                                        16}},
                        null,
                        new int[][] {
                                new int[] {
                                        7,
                                        4,
                                        15,
                                        5,
                                        16}},
                        null,
                        new int[][] {
                                new int[] {
                                        7,
                                        4,
                                        15,
                                        5,
                                        16}},
                        null,
                        new int[][] {
                                new int[] {
                                        7,
                                        4,
                                        15,
                                        5,
                                        16}}},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        24}},
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        9,
                                        5,
                                        6}},
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        29}},
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        8,
                                        5,
                                        6,
                                        9}},
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        25}},
                        null,
                        null},
                new int[][][] {
                        null,
                        new int[][] {
                                new int[] {
                                        16}},
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        17}},
                        null,
                        new int[][] {
                                new int[] {
                                        26}},
                        new int[][] {
                                new int[] {
                                        18}},
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        15}},
                        new int[][] {
                                new int[] {
                                        14}},
                        new int[][] {
                                new int[] {
                                        27}},
                        new int[][] {
                                new int[] {
                                        28}},
                        new int[][] {
                                new int[] {
                                        19}},
                        new int[][] {
                                new int[] {
                                        20}},
                        null,
                        new int[][] {
                                new int[] {
                                        4}},
                        null,
                        null,
                        null,
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        21,
                                        9,
                                        9,
                                        20,
                                        6}},
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        21,
                                        9,
                                        9,
                                        20,
                                        6}},
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        17,
                                        7,
                                        12}},
                        null,
                        new int[][] {
                                new int[] {
                                        17,
                                        7,
                                        12}},
                        null,
                        new int[][] {
                                new int[] {
                                        17,
                                        7,
                                        12}},
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        18,
                                        7,
                                        13}},
                        null,
                        new int[][] {
                                new int[] {
                                        18,
                                        7,
                                        13}},
                        null,
                        new int[][] {
                                new int[] {
                                        18,
                                        7,
                                        13}},
                        null,
                        null},
                new int[][][] {
                        null,
                        new int[][] {
                                new int[] {
                                        16}},
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        17}},
                        null,
                        new int[][] {
                                new int[] {
                                        30}},
                        new int[][] {
                                new int[] {
                                        18}},
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        15}},
                        new int[][] {
                                new int[] {
                                        14}},
                        new int[][] {
                                new int[] {
                                        27}},
                        new int[][] {
                                new int[] {
                                        28}},
                        new int[][] {
                                new int[] {
                                        19}},
                        new int[][] {
                                new int[] {
                                        20}},
                        null,
                        new int[][] {
                                new int[] {
                                        4}},
                        null,
                        null,
                        null,
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        22,
                                        9,
                                        20,
                                        6}},
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        22,
                                        9,
                                        20,
                                        6}},
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        32}},
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        11}},
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null},
                new int[][][] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new int[][] {
                                new int[] {
                                        20,
                                        8,
                                        20,
                                        3}},
                        null,
                        new int[][] {
                                new int[] {
                                        20,
                                        8,
                                        20,
                                        3}},
                        null,
                        null}};
        internal static string[] SymbolTable = new string[] {
                "json",
                "object",
                "fields",
                "field",
                "array",
                "values",
                "value",
                "boolean",
                "fieldsList",
                "valuesList",
                "number",
                "string",
                "true",
                "false",
                "null",
                "lbracket",
                "rbracket",
                "lbrace",
                "rbrace",
                "colon",
                "comma",
                "whitespace",
                "#EOS",
                "#ERROR"};
        internal static ParseAttribute[][] ParseAttributes = new ParseAttribute[][] {
                new ParseAttribute[] {
                        new ParseAttribute("start", true)},
                new ParseAttribute[0],
                new ParseAttribute[] {
                        new ParseAttribute("collapsed", true)},
                new ParseAttribute[0],
                new ParseAttribute[0],
                new ParseAttribute[] {
                        new ParseAttribute("collapsed", true)},
                new ParseAttribute[0],
                new ParseAttribute[0],
                new ParseAttribute[] {
                        new ParseAttribute("collapsed", true),
                        new ParseAttribute("nowarn", true),
                        new ParseAttribute("factored", true)},
                new ParseAttribute[] {
                        new ParseAttribute("collapsed", true),
                        new ParseAttribute("nowarn", true),
                        new ParseAttribute("factored", true)},
                new ParseAttribute[] {
                        new ParseAttribute("terminal", true)},
                new ParseAttribute[] {
                        new ParseAttribute("terminal", true)},
                new ParseAttribute[] {
                        new ParseAttribute("terminal", true)},
                new ParseAttribute[] {
                        new ParseAttribute("terminal", true)},
                new ParseAttribute[] {
                        new ParseAttribute("terminal", true)},
                new ParseAttribute[] {
                        new ParseAttribute("collapsed", true)},
                new ParseAttribute[] {
                        new ParseAttribute("collapsed", true),
                        new ParseAttribute("errorSentinel", true)},
                new ParseAttribute[] {
                        new ParseAttribute("collapsed", true)},
                new ParseAttribute[] {
                        new ParseAttribute("collapsed", true),
                        new ParseAttribute("errorSentinel", true)},
                new ParseAttribute[] {
                        new ParseAttribute("collapsed", true)},
                new ParseAttribute[] {
                        new ParseAttribute("collapsed", true),
                        new ParseAttribute("errorSentinel", true)},
                new ParseAttribute[] {
                        new ParseAttribute("hidden", true)},
                new ParseAttribute[0],
                new ParseAttribute[0]};
        internal static int[] ErrorSentinels = new int[] {
                16,
                18,
                20};
        internal static int[] NodeFlags = new int[] {
                0,
                0,
                1,
                0,
                0,
                1,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0};
        public JsonParser(IEnumerable<Token> tokenizer) : 
                base(JsonParser.ParseTable, JsonParser.SymbolTable, JsonParser.ParseAttributes, JsonParser.ErrorSentinels, JsonParser.NodeFlags, tokenizer, int.MaxValue) {
        }
        public JsonParser(IEnumerable<Token> tokenizer, int maxErrorCount) : 
                base(JsonParser.ParseTable, JsonParser.SymbolTable, JsonParser.ParseAttributes, JsonParser.ErrorSentinels, JsonParser.NodeFlags, tokenizer, maxErrorCount) {
        }
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("Glory", "0.1.0.0")]
internal class GlrTableParser {
    private int[][][][] _parseTable;
    private List<GlrWorker> _workers;
    private GlrWorker _worker;
    private int _workerIndex;
    private LookAheadEnumerator _tokenEnum;
    private string[] _symbolTable;
    private int[] _nodeFlags;
    private ParseAttribute[][] _attributes;
    private int[] _errorSentinels;
    internal int NextWorkerId;
    private int _eosId;
    private int _errorId;
    private int _maxErrorCount;
    public GlrTableParser(int[][][][] parseTable, string[] symbolTable, ParseAttribute[][] attributes, int[] errorSentinels, int[] nodeFlags, IEnumerable<Token> tokenizer) : 
            this(parseTable, symbolTable, attributes, errorSentinels, nodeFlags, tokenizer, int.MaxValue) {
    }
    public GlrTableParser(int[][][][] parseTable, string[] symbolTable, ParseAttribute[][] attributes, int[] errorSentinels, int[] nodeFlags, IEnumerable<Token> tokenizer, int maxErrorCount) {
        this._parseTable = parseTable;
        this._symbolTable = symbolTable;
        this._nodeFlags = nodeFlags;
        this._attributes = attributes;
        this._errorSentinels = errorSentinels;
        this._eosId = System.Array.IndexOf(symbolTable, "#EOS");
        if ((0 > this._eosId)) {
            throw new ArgumentException("Error in symbol table", "symbolTable");
        }
        this._errorId = System.Array.IndexOf(symbolTable, "#ERROR");
        if ((0 > this._errorId)) {
            throw new ArgumentException("Error in symbol table", "symbolTable");
        }
        this._tokenEnum = new LookAheadEnumerator(tokenizer.GetEnumerator());
        this._maxErrorCount = maxErrorCount;
        this.NextWorkerId = 1;
        this._workerIndex = 0;
        this._workers = new List<GlrWorker>(8);
        if (this._tokenEnum.MoveNext()) {
            this._workers.Add(new GlrWorker(this, this.NextWorkerId, this._parseTable, this._errorId, this._eosId, this._errorSentinels, this._nodeFlags, this._workers, this._tokenEnum));
            this.NextWorkerId = (this.NextWorkerId + 1);
        }
    }
    public int TreeId {
        get {
            return this._worker.Id;
        }
    }
    public LRNodeType NodeType {
        get {
            if (this._worker.HasErrors) {
                return LRNodeType.Error;
            }
            return this._worker.NodeType;
        }
    }
    public int Line {
        get {
            return this._worker.CurrentToken.Line;
        }
    }
    public int Column {
        get {
            return this._worker.CurrentToken.Column;
        }
    }
    public long Position {
        get {
            return this._worker.CurrentToken.Position;
        }
    }
    public int SymbolId {
        get {
            LRNodeType n = this.NodeType;
            if ((LRNodeType.Shift == n)) {
                return this._worker.CurrentToken.SymbolId;
            }
            if ((LRNodeType.Reduce == n)) {
                return this._worker.RuleDefinition[0];
            }
            if ((LRNodeType.Error == n)) {
                return this._errorId;
            }
            if ((LRNodeType.EndDocument == n)) {
                return this._eosId;
            }
            return -1;
        }
    }
    public ParseAttribute[] Attributes {
        get {
            int sid = this.SymbolId;
            if (((-1 < sid) 
                        && (this._attributes.Length > sid))) {
                return this._attributes[sid];
            }
            return null;
        }
    }
    public string[] RuleDefinition {
        get {
            if ((LRNodeType.Reduce != this._worker.NodeType)) {
                return null;
            }
            string[] result = new string[this._worker.RuleDefinition.Length];
            for (int i = 0; (i < result.Length); i = (i + 1)) {
                result[i] = this._symbolTable[this._worker.RuleDefinition[i]];
            }
            return result;
        }
    }
    public string Rule {
        get {
            string[] def = this.RuleDefinition;
            if ((null == def)) {
                return null;
            }
            string result = string.Concat(def[0], " ->");
            for (int i = 1; (i < def.Length); i = (i + 1)) {
                result = (result + string.Concat(" ", def[i]));
            }
            return result;
        }
    }
    public string Symbol {
        get {
            int sid = this.SymbolId;
            if ((0 > sid)) {
                return null;
            }
            return this._symbolTable[sid];
        }
    }
    public string Value {
        get {
            return this._worker.Value;
        }
    }
    public bool Read() {
        if ((0 == this._workers.Count)) {
            return false;
        }
        this._workerIndex = ((this._workerIndex + 1) 
                    % this._workers.Count);
        this._worker = this._workers[this._workerIndex];
        for (
        ; (false == this._worker.Read()); 
        ) {
            this._workers.RemoveAt(this._workerIndex);
            if ((this._workerIndex == this._workers.Count)) {
                this._workerIndex = 0;
            }
            if ((0 == this._workers.Count)) {
                return false;
            }
            this._worker = this._workers[this._workerIndex];
        }
        int min = int.MaxValue;
        int ic = this._workers.Count;
        for (int i = 0; (i < ic); i = (i + 1)) {
            GlrWorker w = this._workers[i];
            if (((0 < i) 
                        && (w.ErrorCount > this._maxErrorCount))) {
                this._workers.RemoveAt(i);
                i = (i - 1);
                ic = (ic - 1);
            }
            if ((min > w.Index)) {
                min = w.Index;
            }
            if ((0 == min)) {
                i = ic;
            }
        }
        int j = min;
        for (
        ; (j > 0); 
        ) {
            this._tokenEnum.MoveNext();
            j = (j - 1);
        }
        for (int i = 0; (i < ic); i = (i + 1)) {
            GlrWorker w = this._workers[i];
            w.Index = (w.Index - min);
        }
        return true;
    }
    public ParseNode[] ParseReductions() {
        return this.ParseReductions(false, true, false);
    }
    public ParseNode[] ParseReductions(bool trim, bool transform, bool returnAll) {
        Dictionary<int, Stack<ParseNode>> map = new Dictionary<int, Stack<ParseNode>>();
        int oldId = 0;
        Dictionary<int, int> accepted = new Dictionary<int, int>();
        for (
        ; this.Read(); 
        ) {
            Stack<ParseNode> rs;
            if ((false == map.TryGetValue(this.TreeId, out rs))) {
                if ((false 
                            == (0 == oldId))) {
                    List<ParseNode> l = new List<ParseNode>(map[oldId]);
                    l.Reverse();
                    rs = new Stack<ParseNode>(l);
                }
                else {
                    rs = new Stack<ParseNode>();
                }
                map.Add(this.TreeId, rs);
            }
            ParseNode p;
            LRNodeType n = this.NodeType;
            if ((LRNodeType.Shift == n)) {
                p = new ParseNode(this.SymbolId, this.Symbol, null, this.Value, this.Attributes, this.Line, this.Column, this.Position);
                rs.Push(p);
            }
            else {
                if ((LRNodeType.Reduce == n)) {
                    if (((false == trim) 
                                || (false 
                                == (2 == this.RuleDefinition.Length)))) {
                        List<ParseNode> cl = new List<ParseNode>();
                        for (int i = 1; (this.RuleDefinition.Length > i); i = (i + 1)) {
                            if ((false 
                                        == (0 == rs.Count))) {
                                ParseNode pc = rs.Pop();
                                this._AddChildren(pc, transform, cl);
                                string s = pc.Symbol;
                                if (("#ERROR" == s)) {
                                    i = this.RuleDefinition.Length;
                                }
                            }
                            else {
                                ParseNode pc = new ParseNode(this._errorId, "#ERROR", null, "", this.Attributes, this.Line, this.Column, this.Position);
                                this._AddChildren(pc, transform, cl);
                            }
                        }
                        p = new ParseNode(this.SymbolId, this.Symbol, cl.ToArray(), null, this.Attributes, this.Line, this.Column, this.Position);
                        rs.Push(p);
                    }
                }
                else {
                    if ((LRNodeType.Error == n)) {
                        p = new ParseNode(this._errorId, "#ERROR", null, this.Value, this.Attributes, this.Line, this.Column, this.Position);
                        rs.Push(p);
                    }
                    else {
                        if ((LRNodeType.Accept == n)) {
                            accepted.Add(this.TreeId, 0);
                        }
                    }
                }
            }
            oldId = this.TreeId;
        }
        List<ParseNode> result = new List<ParseNode>(map.Count);
        IEnumerator<KeyValuePair<int, Stack<ParseNode>>> e = map.GetEnumerator();
        bool first = true;
        for (
        ; e.MoveNext(); 
        ) {
            KeyValuePair<int, Stack<ParseNode>> kvp = e.Current;
            if (((first || returnAll) 
                        || accepted.ContainsKey(kvp.Key))) {
                Stack<ParseNode> rs = kvp.Value;
                if ((false 
                            == (0 == rs.Count))) {
                    ParseNode n = rs.Pop();
                    List<ParseNode> cl = new List<ParseNode>();
                    if (n.IsNonTerminal) {
                        cl.AddRange(n.Children);
                    }
                    string s = n.Symbol;
                    for (
                    ; (("#ERROR" != s) 
                                && (0 < rs.Count)); 
                    ) {
                        this._AddChildren(rs.Pop(), transform, cl);
                    }
                    n = new ParseNode(n.SymbolId, n.Symbol, cl.ToArray(), n.Value, n.Attributes, n.Line, n.Column, n.Position);
                    result.Add(n);
                }
            }
            first = false;
        }
        return result.ToArray();
    }
    public string[] Symbols {
        get {
            return this._symbolTable;
        }
    }
    void _AddChildren(ParseNode pc, bool transform, IList<ParseNode> result) {
        if ((false == transform)) {
            result.Insert(0, pc);
            return;
        }
        if (pc.IsCollapsed) {
            if ((null == pc.Value)) {
                int ic = pc.Children.Length;
                for (int i = (ic - 1); (0 <= i); i = (i - 1)) {
                    this._AddChildren(pc.Children[i], transform, result);
                }
            }
        }
        else {
            result.Insert(0, pc);
        }
    }
}
[System.CodeDom.Compiler.GeneratedCodeAttribute("Glory", "0.1.0.0")]
internal class GlrWorker {
    private int[][][][] _parseTable;
    private List<int> _stack;
    private LookAheadEnumerator _tokenEnum;
    public Token CurrentToken;
    public LRNodeType NodeType;
    public int[] RuleDefinition;
    public int ErrorCount;
    public int Id;
    public int Index;
    private int _eosId;
    private int _errorId;
    private int[] _errorSentinels;
    private int[] _nodeFlags;
    private int _tupleIndex;
    private List<int> _rulePart;
    private bool _continuation;
    public Queue<Token> ErrorTokens;
    private IList<GlrWorker> _workers;
    private WeakReference<GlrTableParser> _outer;
    GlrTableParser _Outer {
        get {
            if ((null == this._outer)) {
                return null;
            }
            GlrTableParser result;
            if (this._outer.TryGetTarget(out result)) {
                return result;
            }
            return null;
        }
        set {
            this._outer = new WeakReference<GlrTableParser>(value);
        }
    }
    public GlrWorker(GlrTableParser outer, int id, int[][][][] parseTable, int errorId, int eosId, int[] errorSentinels, int[] nodeFlags, IList<GlrWorker> workers, LookAheadEnumerator tokenEnum) {
        this._Outer = outer;
        this.Id = id;
        this._parseTable = parseTable;
        this._nodeFlags = nodeFlags;
        this._errorId = errorId;
        this._eosId = eosId;
        this._tokenEnum = tokenEnum;
        this._stack = new List<int>();
        this._rulePart = new List<int>();
        this.Index = 0;
        this._tupleIndex = 0;
        this._workers = workers;
        this._errorSentinels = errorSentinels;
        this.ErrorTokens = new Queue<Token>();
        this._continuation = false;
        this.NodeType = LRNodeType.Initial;
    }
    public GlrWorker(GlrTableParser outer, GlrWorker worker, int tupleIndex) {
        this._Outer = outer;
        this._parseTable = worker._parseTable;
        this._errorId = worker._errorId;
        this._eosId = worker._eosId;
        this._errorSentinels = worker._errorSentinels;
        this._nodeFlags = worker._nodeFlags;
        this.ErrorTokens = new Queue<Token>(worker.ErrorTokens);
        this._tokenEnum = worker._tokenEnum;
        this._stack = new List<int>(worker._stack.Count);
        this._rulePart = new List<int>(worker._rulePart);
        this._stack.AddRange(worker._stack);
        this.Index = worker.Index;
        this._tupleIndex = tupleIndex;
        this.NodeType = worker.NodeType;
        this.Id = outer.NextWorkerId;
        this.CurrentToken = worker.CurrentToken;
        outer.NextWorkerId = (outer.NextWorkerId + 1);
        this._continuation = true;
        this._workers = worker._workers;
    }
    public bool IsCollapsed {
        get {
            int sid = this.SymbolId;
            if ((-1 < sid)) {
                return (1 
                            == (1 & this._nodeFlags[sid]));
            }
            return false;
        }
    }
    public bool Read() {
        if ((false == this._Read())) {
            return false;
        }
        bool more = true;
        for (
        ; (more && this.IsCollapsed); 
        ) {
            if ((LRNodeType.Reduce == this.NodeType)) {
                for (int i = 1; (i < this.RuleDefinition.Length); i = (i + 1)) {
                    this._rulePart.Add(this.RuleDefinition[i]);
                }
            }
            more = this._Read();
        }
        if (((LRNodeType.Reduce == this.NodeType) 
                    && (0 < this._rulePart.Count))) {
            List<int> def = new List<int>();
            def.AddRange(this.RuleDefinition);
            def.AddRange(this._rulePart);
            this._rulePart.Clear();
            this.RuleDefinition = def.ToArray();
        }
        return more;
    }
    bool _Read() {
        if ((false 
                    == (0 == this.ErrorTokens.Count))) {
            Token tok = this.ErrorTokens.Dequeue();
            return true;
        }
        if (this._continuation) {
            this._continuation = false;
        }
        else {
            LRNodeType n = this.NodeType;
            if ((LRNodeType.Shift == n)) {
                this._ReadNextToken();
            }
            else {
                if ((LRNodeType.Initial == n)) {
                    this._stack.Add(0);
                    this._ReadNextToken();
                    this.NodeType = LRNodeType.Error;
                }
                else {
                    if ((LRNodeType.EndDocument == n)) {
                        return false;
                    }
                    else {
                        if ((LRNodeType.Accept == n)) {
                            this.NodeType = LRNodeType.EndDocument;
                            this._stack.Clear();
                            return true;
                        }
                    }
                }
            }
        }
        if ((0 < this._stack.Count)) {
            int[][][] entry = this._parseTable[this._stack[(this._stack.Count - 1)]];
            if ((this._errorId == this.CurrentToken.SymbolId)) {
                this._tupleIndex = 0;
                this._Panic();
                return true;
            }
            int[][] tbl = entry[this.CurrentToken.SymbolId];
            if ((null == tbl)) {
                this._tupleIndex = 0;
                this._Panic();
                return true;
            }
            int[] trns = tbl[this._tupleIndex];
            if ((0 == this._tupleIndex)) {
                for (int i = 1; (i < tbl.Length); i = (i + 1)) {
                    this._workers.Add(new GlrWorker(this._Outer, this, i));
                }
            }
            if ((null == trns)) {
                this._Panic();
                this._tupleIndex = 0;
                return true;
            }
            if ((1 == trns.Length)) {
                if ((false 
                            == (-1 == trns[0]))) {
                    this.NodeType = LRNodeType.Shift;
                    this.RuleDefinition = null;
                    this._stack.Add(trns[0]);
                    this._tupleIndex = 0;
                    return true;
                }
                else {
                    if ((false 
                                == (this._eosId == this.CurrentToken.SymbolId))) {
                        this._Panic();
                        this._tupleIndex = 0;
                        return true;
                    }
                    this.NodeType = LRNodeType.Accept;
                    this._stack.Clear();
                    this._tupleIndex = 0;
                    return true;
                }
            }
            else {
                this.RuleDefinition = new int[(trns.Length - 1)];
                for (int i = 1; (i < trns.Length); i = (i + 1)) {
                    this.RuleDefinition[(i - 1)] = trns[i];
                }
                for (int i = 2; (i < trns.Length); i = (i + 1)) {
                    this._stack.RemoveAt((this._stack.Count - 1));
                }
                int state = this._stack[(this._stack.Count - 1)];
                int[][][] e = this._parseTable[state];
                if ((null == e)) {
                    this._Panic();
                    this._tupleIndex = 0;
                    return true;
                }
                this._stack.Add(this._parseTable[state][trns[1]][0][0]);
                this.NodeType = LRNodeType.Reduce;
                this._tupleIndex = 0;
                return true;
            }
        }
        else {
            this.NodeType = LRNodeType.EndDocument;
            this._tupleIndex = 0;
            return true;
        }
    }
    public int SymbolId {
        get {
            if ((0 < this.ErrorTokens.Count)) {
                return this._errorId;
            }
            LRNodeType n = this.NodeType;
            if ((LRNodeType.Reduce == n)) {
                return this.RuleDefinition[0];
            }
            if ((LRNodeType.Error == n)) {
                return this._errorId;
            }
            if ((LRNodeType.Shift == n)) {
                return this.CurrentToken.SymbolId;
            }
            return -1;
        }
    }
    public string Value {
        get {
            if ((0 < this.ErrorTokens.Count)) {
                Token err = this.ErrorTokens.Peek();
                return err.Value;
            }
            LRNodeType n = this.NodeType;
            if (((LRNodeType.Shift == n) 
                        || (LRNodeType.Error == n))) {
                return this.CurrentToken.Value;
            }
            return null;
        }
    }
    public bool HasErrors {
        get {
            return (0 < this.ErrorTokens.Count);
        }
    }
    void _UpdatePositionFinal() {
        for (int i = 0; (i < this.CurrentToken.Value.Length); i = (i + 1)) {
            char ch = this.CurrentToken.Value[i];
            if (('\n' == ch)) {
                this.CurrentToken.Line = (this.CurrentToken.Line + 1);
                this.CurrentToken.Column = 1;
            }
            else {
                if (('\r' == ch)) {
                    this.CurrentToken.Column = 1;
                }
                else {
                    if (('\t' == ch)) {
                        this.CurrentToken.Column = (this.CurrentToken.Column + 4);
                    }
                    else {
                        this.CurrentToken.Column = (this.CurrentToken.Column + 1);
                    }
                }
            }
            this.CurrentToken.Position = (this.CurrentToken.Position + 1);
        }
    }
    void _ReadNextToken() {
        Token tok;
        if (this._tokenEnum.TryPeek(this.Index, out tok)) {
            this.CurrentToken = tok;
            if ((-1 == this.CurrentToken.SymbolId)) {
                this.CurrentToken.Symbol = "#ERROR";
                this.CurrentToken.SymbolId = this._errorId;
            }
            else {
                this.CurrentToken.Symbol = this._Outer.Symbols[this.CurrentToken.SymbolId];
            }
            this.Index = (this.Index + 1);
        }
        else {
            this.CurrentToken.Symbol = "#EOS";
            this.CurrentToken.Value = null;
            this.CurrentToken.SymbolId = this._eosId;
            if ((null != this.CurrentToken.Value)) {
                this._UpdatePositionFinal();
            }
        }
    }
    void _Panic() {
        int[] sa = this._errorSentinels;
        if ((null == sa)) {
            sa = new int[0];
        }
        int idx = System.Array.IndexOf(sa, this.CurrentToken.SymbolId);
        if ((-1 < idx)) {
            this.ErrorCount = (this.ErrorCount + 1);
            this.ErrorTokens.Enqueue(this.CurrentToken);
            this._ReadNextToken();
        }
        for (
        ; ((false 
                    == (this._eosId == this.CurrentToken.SymbolId)) 
                    && (0 
                    > (idx = System.Array.IndexOf(sa, this.CurrentToken.SymbolId)))); 
        ) {
            this.ErrorCount = (this.ErrorCount + 1);
            this.ErrorTokens.Enqueue(this.CurrentToken);
            this._ReadNextToken();
        }
        if ((-1 < idx)) {
            for (
            ; (0 < this._stack.Count); 
            ) {
                int[][][] entry = this._parseTable[this._stack[(this._stack.Count - 1)]];
                int[][] t = entry[this.CurrentToken.SymbolId];
                if ((null != t)) {
                    this._continuation = true;
                    return;
                }
                else {
                    this._stack.RemoveAt((this._stack.Count - 1));
                }
            }
        }
    }
}
[System.CodeDom.Compiler.GeneratedCodeAttribute("Glory", "0.1.0.0")]
internal class LookAheadEnumerator : object, IEnumerator<Token> {
    private const int _Enumerating = 0;
    private const int _NotStarted = -2;
    private const int _Ended = -1;
    private const int _Disposed = -3;
    private IEnumerator<Token> _inner;
    private int _state;
    private const int _DefaultCapacity = 16;
    private const float _GrowthFactor = 0.9F;
    private Token[] _queue;
    private int _queueHead;
    private int _queueCount;
    public LookAheadEnumerator(IEnumerator<Token> inner) {
        this._inner = inner;
        this._state = LookAheadEnumerator._NotStarted;
        this._queue = new Token[LookAheadEnumerator._DefaultCapacity];
        this._queueHead = 0;
        this._queueCount = 0;
    }
    public void DiscardLookAhead() {
        for (
        ; (1 < this._queueCount); 
        ) {
            this._Dequeue();
        }
    }
    public Token Current {
        get {
            if ((0 > this._state)) {
                if ((LookAheadEnumerator._NotStarted == this._state)) {
                    throw new InvalidOperationException("The cursor is before the start of the enumeration.");
                }
                if ((LookAheadEnumerator._Ended == this._state)) {
                    throw new InvalidOperationException("The cursor is after the end of the enumeration.");
                }
                throw new ObjectDisposedException(typeof(LookAheadEnumerator).Name);
            }
            return this._queue[this._queueHead];
        }
    }
    object System.Collections.IEnumerator.Current {
        get {
            return this.Current;
        }
    }
    internal int QueueCount {
        get {
            return this._queueCount;
        }
    }
    public bool TryPeek(int lookahead, out Token value) {
        if ((LookAheadEnumerator._Disposed == this._state)) {
            throw new ObjectDisposedException(typeof(LookAheadEnumerator).Name);
        }
        if ((0 > lookahead)) {
            throw new ArgumentOutOfRangeException("lookahead");
        }
        if ((LookAheadEnumerator._Ended == this._state)) {
            value = default(Token);
            return false;
        }
        if ((LookAheadEnumerator._NotStarted == this._state)) {
            if ((0 == lookahead)) {
                value = default(Token);
                return false;
            }
        }
        if ((lookahead < this._queueCount)) {
            value = this._queue[((lookahead + this._queueHead) 
                        % this._queue.Length)];
            return true;
        }
        lookahead = (lookahead - this._queueCount);
        value = default(Token);
        for (
        ; ((0 <= lookahead) 
                    && this._inner.MoveNext()); 
        ) {
            value = this._inner.Current;
            this._Enqueue(value);
            lookahead = (lookahead - 1);
        }
        return (-1 == lookahead);
    }
    public Token Peek(int lookahead) {
        Token value;
        if ((false == this.TryPeek(lookahead, out value))) {
            throw new InvalidOperationException("There were not enough values in the enumeration to satisfy the request");
        }
        return value;
    }
    internal bool IsEnumerating {
        get {
            return (-1 < this._state);
        }
    }
    internal bool IsEnded {
        get {
            return (LookAheadEnumerator._Ended == this._state);
        }
    }
    public IEnumerable<Token> LookAhead {
        get {
            if ((0 > this._state)) {
                if ((this._state == LookAheadEnumerator._NotStarted)) {
                    throw new InvalidOperationException("The cursor is before the start of the enumeration.");
                }
                if ((this._state == LookAheadEnumerator._Ended)) {
                    throw new InvalidOperationException("The cursor is after the end of the enumeration.");
                }
                throw new ObjectDisposedException(typeof(LookAheadEnumerator).Name);
            }
            return new LookAheadEnumeratorEnumerable(this);
        }
    }
    public bool MoveNext() {
        if ((0 > this._state)) {
            if ((LookAheadEnumerator._Disposed == this._state)) {
                throw new ObjectDisposedException(typeof(LookAheadEnumerator).Name);
            }
            if ((LookAheadEnumerator._Ended == this._state)) {
                return false;
            }
            if ((LookAheadEnumerator._NotStarted == this._state)) {
                if ((0 < this._queueCount)) {
                    this._state = LookAheadEnumerator._Enumerating;
                    return true;
                }
                if ((false == this._inner.MoveNext())) {
                    this._state = LookAheadEnumerator._Ended;
                    return false;
                }
                this._Enqueue(this._inner.Current);
                this._state = LookAheadEnumerator._Enumerating;
                return true;
            }
        }
        this._Dequeue();
        if ((0 == this._queueCount)) {
            if ((false == this._inner.MoveNext())) {
                this._state = LookAheadEnumerator._Ended;
                return false;
            }
            this._Enqueue(this._inner.Current);
        }
        return true;
    }
    bool System.Collections.IEnumerator.MoveNext() {
        return this.MoveNext();
    }
    void System.Collections.IEnumerator.Reset() {
        this._inner.Reset();
        this._queueHead = 0;
        this._queueCount = 0;
        this._state = LookAheadEnumerator._NotStarted;
    }
    void System.IDisposable.Dispose() {
        if ((false 
                    == (LookAheadEnumerator._Disposed == this._state))) {
            this._inner.Dispose();
            this._state = LookAheadEnumerator._Disposed;
        }
    }
    void _Enqueue(Token item) {
        if ((this._queueCount == this._queue.Length)) {
            Token[] arr = new Token[((int)((this._queue.Length 
                        * (1 + LookAheadEnumerator._GrowthFactor))))];
            if (((this._queueHead + this._queueCount) 
                        <= this._queue.Length)) {
                System.Array.Copy(this._queue, arr, this._queueCount);
                this._queueHead = 0;
                arr[this._queueCount] = item;
                this._queueCount = (this._queueCount + 1);
                this._queue = arr;
            }
            else {
                System.Array.Copy(this._queue, this._queueHead, arr, 0, (this._queue.Length - this._queueHead));
                System.Array.Copy(this._queue, 0, arr, (this._queue.Length - this._queueHead), this._queueHead);
                this._queueHead = 0;
                arr[this._queueCount] = item;
                this._queueCount = (this._queueCount + 1);
                this._queue = arr;
            }
        }
        else {
            this._queue[((this._queueHead + this._queueCount) 
                        % this._queue.Length)] = item;
            this._queueCount = (this._queueCount + 1);
        }
    }
    Token _Dequeue() {
        if ((0 == this._queueCount)) {
            throw new InvalidOperationException("The queue is empty");
        }
        Token result = this._queue[this._queueHead];
        this._queue[this._queueHead] = default(Token);
        this._queueHead = (this._queueHead + 1);
        this._queueHead = (this._queueHead % this._queue.Length);
        this._queueCount = (this._queueCount - 1);
        return result;
    }
}
[System.CodeDom.Compiler.GeneratedCodeAttribute("Glory", "0.1.0.0")]
internal class LookAheadEnumeratorEnumerable : object, IEnumerable<Token> {
    private LookAheadEnumerator _outer;
    public LookAheadEnumeratorEnumerable(LookAheadEnumerator outer) {
        this._outer = outer;
    }
    public IEnumerator<Token> GetEnumerator() {
        LookAheadEnumeratorEnumerator result = ((LookAheadEnumeratorEnumerator)(System.Activator.CreateInstance(typeof(LookAheadEnumeratorEnumerator), this._outer)));
        return result;
    }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
        return this.GetEnumerator();
    }
}
[System.CodeDom.Compiler.GeneratedCodeAttribute("Glory", "0.1.0.0")]
internal class LookAheadEnumeratorEnumerator : object, IEnumerator<Token> {
    private const int _NotStarted = -2;
    private const int _Ended = -1;
    private const int _Disposed = -3;
    private LookAheadEnumerator _outer;
    private int _index;
    private Token _current;
    public LookAheadEnumeratorEnumerator(LookAheadEnumerator outer) {
        this._outer = outer;
        if (this._outer.IsEnumerating) {
            this._current = this._outer.Current;
        }
        this._index = LookAheadEnumeratorEnumerator._NotStarted;
    }
    public Token Current {
        get {
            if ((0 > this._index)) {
                if ((this._index == LookAheadEnumeratorEnumerator._NotStarted)) {
                    throw new InvalidOperationException("The cursor is before the start of the enumeration.");
                }
                if ((this._index == LookAheadEnumeratorEnumerator._Ended)) {
                    throw new InvalidOperationException("The cursor is after the end of the enumeration.");
                }
                throw new ObjectDisposedException(typeof(LookAheadEnumeratorEnumerator).Name);
            }
            return this._current;
        }
    }
    object System.Collections.IEnumerator.Current {
        get {
            return this.Current;
        }
    }
    void System.IDisposable.Dispose() {
        this._index = LookAheadEnumeratorEnumerator._Disposed;
    }
    bool System.Collections.IEnumerator.MoveNext() {
        Token value;
        if ((0 > this._index)) {
            if ((this._index == LookAheadEnumeratorEnumerator._Disposed)) {
                throw new ObjectDisposedException(typeof(LookAheadEnumeratorEnumerator).Name);
            }
            if ((this._index == LookAheadEnumeratorEnumerator._Ended)) {
                return false;
            }
            this._index = -1;
        }
        this._index = (this._index + 1);
        if ((false == this._outer.TryPeek(this._index, out value))) {
            this._index = LookAheadEnumeratorEnumerator._Ended;
            return false;
        }
        this._current = value;
        return true;
    }
    void System.Collections.IEnumerator.Reset() {
        this._index = LookAheadEnumeratorEnumerator._NotStarted;
    }
}
[System.CodeDom.Compiler.GeneratedCodeAttribute("Glory", "0.1.0.0")]
internal enum LRNodeType {
    Initial = -1,
    Shift,
    Reduce,
    Accept,
    Error,
    EndDocument,
}
[TypeConverter(typeof(ParseAttributeConverter))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Glory", "0.1.0.0")]
public struct ParseAttribute {
    private string _name;
    private object _value;
    public string Name {
        get {
            return this._name;
        }
    }
    public object Value {
        get {
            return this._value;
        }
    }
    public ParseAttribute(string name, object value) {
        this._name = name;
        this._value = value;
    }
}
[System.CodeDom.Compiler.GeneratedCodeAttribute("Glory", "0.1.0.0")]
internal class ParseAttributeConverter : TypeConverter {
    public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) {
        if ((typeof(InstanceDescriptor) == destinationType)) {
            return true;
        }
        return base.CanConvertTo(context, destinationType);
    }
    public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) {
        if ((typeof(InstanceDescriptor) == destinationType)) {
            ParseAttribute attr = ((ParseAttribute)(value));
            return new InstanceDescriptor(typeof(ParseAttribute).GetConstructor(new Type[] {
                            typeof(string),
                            typeof(object)}), new object[] {
                        attr.Name,
                        attr.Value});
        }
        return base.ConvertTo(context, culture, value, destinationType);
    }
}
[System.CodeDom.Compiler.GeneratedCodeAttribute("Glory", "0.1.0.0")]
internal partial class ParseNode {
    private int _symbolId;
    private string _symbol;
    private string _value;
    private int _line;
    private int _column;
    private long _position;
    private ParseNode[] _children;
    private ParseAttribute[] _attributes;
    public ParseNode(int symbolId, string symbol, ParseNode[] children, string value, ParseAttribute[] attributes, int line, int column, long position) {
        this._symbolId = symbolId;
        this._symbol = symbol;
        this._value = null;
        this._children = children;
        this._value = value;
        this._attributes = attributes;
        this._line = line;
        this._column = column;
        this._position = position;
    }
    public bool IsNonTerminal {
        get {
            return (null != this._children);
        }
    }
    public ParseNode[] Children {
        get {
            return this._children;
        }
    }
    public int SymbolId {
        get {
            return this._symbolId;
        }
    }
    public string Symbol {
        get {
            return this._symbol;
        }
    }
    public string Value {
        get {
            return this._value;
        }
    }
    public int Line {
        get {
            return this._line;
        }
    }
    public int Column {
        get {
            return this._column;
        }
    }
    public long Position {
        get {
            return this._position;
        }
    }
    public ParseAttribute[] Attributes {
        get {
            return this._attributes;
        }
    }
    public bool IsCollapsed {
        get {
            for (int i = 0; (i < this._attributes.Length); i = (i + 1)) {
                ParseAttribute a = this._attributes[i];
                if (("collapsed" == a.Name)) {
                    try {
                        return ((bool)(a.Value));
                    }
                    catch (Exception ) {
                        return false;
                    }
                }
            }
            return false;
        }
    }
    public override string ToString() {
        return this.ToString(null);
    }
    public string ToString(string format) {
        if (("t" == format)) {
            StringBuilder sb = new StringBuilder();
            ParseNode._AppendTree(this, sb);
            return sb.ToString();
        }
        if (this.IsNonTerminal) {
            return string.Concat(this.Symbol, ": Count = ", this._children.Length.ToString());
        }
        return string.Concat(this.Symbol, ": ", this.Value);
    }
    static void _AppendTree(ParseNode node, System.Text.StringBuilder builder) {
        List<ParseNode> firstStack = new List<ParseNode>();
        firstStack.Add(node);
        List<List<ParseNode>> childListStack = new List<List<ParseNode>>();
        childListStack.Add(firstStack);
        for (
        ; (childListStack.Count > 0); 
        ) {
            List<ParseNode> childStack = childListStack[(childListStack.Count - 1)];
            if ((childStack.Count == 0)) {
                childListStack.RemoveAt((childListStack.Count - 1));
            }
            else {
                node = childStack[0];
                childStack.RemoveAt(0);
                string indent = "";
                for (int i = 0; (i 
                            < (childListStack.Count - 1)); i = (i + 1)) {
                    if ((0 < childListStack[i].Count)) {
                        indent = (indent + "|  ");
                    }
                    else {
                        indent = (indent + "   ");
                    }
                }
                string s = node.Symbol;
                string ns = "";
                if ((null != node.Value)) {
                    ns = node.Value;
                }
                string ss = string.Concat(indent, "+- ", string.Concat(s, " ", ns));
                ss = ss.TrimEnd();
                builder.Append(ss);
                builder.AppendLine();
                if ((node.IsNonTerminal 
                            && (0 < node.Children.Length))) {
                    List<ParseNode> pnl = new List<ParseNode>(node.Children);
                    childListStack.Add(pnl);
                }
            }
        }
    }
}
[System.CodeDom.Compiler.GeneratedCodeAttribute("Glory", "0.1.0.0")]
internal struct Token {
    public string Symbol;
    public int SymbolId;
    public int Line;
    public int Column;
    public long Position;
    public string Value;
    public override string ToString() {
        return string.Concat(this.Symbol, "(", string.Concat(this.SymbolId.ToString(), ") : ", this.Value));
    }
}
